import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Link, useLocation } from 'react-router-dom';
import { ThemeProvider } from './context/ThemeContext';
import { LanguageProvider, useLanguage } from './context/LanguageContext'; // Import useLanguage
import AppErrorBoundary from './components/ui/ErrorBoundary';
import Header from './components/Header/Header';
import Hero from './components/sections/Hero';
import Features from './components/sections/Features';
import News from "./components/sections/News";
import Footer from './components/layout/Footer';
import Container from './components/ui/Container';
import Updates from './pages/Updates';
import FAQ from './pages/FAQ';
import Roadmap from './components/sections/Roadmap';
import Docs from './pages/Docs'; // Import the new Docs page
import { PageTransitionWrapper } from './components/Effects/AnimationEffects'; // Import PageTransitionWrapper

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

const Home = () => (
    <Container>
      <Hero />
      <News />
      <Features />
      <Roadmap />
    </Container>
);

// Create a wrapper component to use useLocation hook inside Router
const AppContent = () => {
  const location = useLocation();
  const { language } = useLanguage(); // Get current language from context

  return (
    <div className="min-h-screen bg-[var(--primary)] text-[var(--text-primary)] transition-colors duration-300">
      <Header />
      <PageTransitionWrapper key={`${location.pathname}-${language}`} duration={1.0} glitchIntensity={1.5}>
        <Routes location={location}>
          <Route path="/" element={<Home />} />
          <Route path="/updates" element={<Updates />} />
          <Route path="/faq" element={<FAQ />} />
          <Route path="/docs" element={<Docs />} />
        </Routes>
      </PageTransitionWrapper>
      <Footer />
    </div>
  );
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
      <AppErrorBoundary>
      <LanguageProvider>
        <ThemeProvider>
            <Router>
              <AppContent />
            </Router>
        </ThemeProvider>
      </LanguageProvider>
    </AppErrorBoundary>
        {children}
      </body>
    </html>
  );
}
